let crearGrafica1 = (myData) => {
    let columns = [];
    let color = [];
    let liVentaMes = '';

    //Rellenamos los datos generales
    $('#clientesActivos').text(myData.estadisticas.clientesTotales);
    $('#serviciosMes').text(myData.estadisticas.serviciosMes);
    $('#gananciasMes').text(myData.estadisticas.gananciasMes);
    $('#domiciliariosTotales').text(myData.estadisticas.domiciliariosTotales);

    for (let i = 0; i < myData.ventasMes.valores.length; i++) {
        columns[i] = [];
        color[i] = [];
        columns[i].push(myData.ventasMes.valores[i][0], myData.ventasMes.valores[i][1]);
        color[i].push(colorHEX());
    }

    for (let i = 0; i < columns.length; i++) {
        //Contruimos la etique 'li' que contiene las venta del emes en los tipos de servicios
        liVentaMes +=
            `<li>` +
            `<i class="fas fa-circle font-10 mr-2" style="color:${color[i]};"></i>` +
            `<span class="text-muted">${columns[i][0]}</span>` +
            `<span class="text-dark float-right font-weight-medium">$ ${columns[i][1]}</span>` +
            `</li>`;
    }
    $('#liVentaMes').append(liVentaMes);
    c3.generate({
        bindto: '#campaign-v2',
        data: {
            columns,
            type: 'donut',
            tooltip: { show: !0 },
        },
        donut: { label: { show: !1 }, title: 'Servicios', width: 18 },
        legend: { hide: !0 },
        color: { pattern: color },
    });
    d3.select('#campaign-v2 .c3-chart-arcs-title').style('font-family', 'Rubik');

    let labels = myData.estadisticasGanancias.labels;
    let series = myData.estadisticasGanancias.series;
    let dias = ['Lun', 'Mar', 'Mi√©', 'Jue', 'Vie', 'Sab', 'Dom'];
    for (let i = 0; i < dias.length; i++) {
        if (labels.indexOf(dias[i]) == -1) {
            labels.push(dias[i]);
            series[0].push(0);
        }
    }
    //Ordenamos por dias
    for (let i = 0; i < dias.length; i++) {
        if (labels[i] != dias[i]) {
            let index = labels.indexOf(dias[i]);
            let reemplazo = labels[i];
            labels[i] = labels[index];
            labels[index] = reemplazo;

            let reemplazoSeries = series[0][i];
            series[0][i] = series[0][index];
            series[0][index] = reemplazoSeries;
        }
    }
    var t = new Chartist.Line(
        '.stats',
        { labels, series },
        {
            low: 0,
            high: Math.max(...series[0]) + Math.max(...series[0]) * 0.25,
            showArea: !0,
            fullWidth: !0,
            plugins: [Chartist.plugins.tooltip()],
            axisY: {
                onlyInteger: !0,
                scaleMinSpace: 40,
                offset: 40,
                labelInterpolationFnc: function (e) {
                    return e / 1000 + 'k';
                },
            },
        }
    );
    t.on('draw', function (data) {
        'area' === data.type && data.element.attr({ x1: data.x1 + 0.001 });
    }),
        t.on('created', function (e) {
            e.svg
                .elem('defs')
                .elem('linearGradient', { id: 'gradient', x1: 0, y1: 1, x2: 0, y2: 0 })
                .elem('stop', { offset: 0, 'stop-color': 'rgba(255, 255, 255, 1)' })
                .parent()
                .elem('stop', { offset: 1, 'stop-color': 'rgba(80, 153, 255, 1)' });
        }),
        $(window).on('resize', function () {
            t.update();
        });
    var e = {
        axisX: { showGrid: !1 },
        seriesBarDistance: 1,
        chartPadding: { top: 15, right: 15, bottom: 5, left: 0 },
        plugins: [Chartist.plugins.tooltip()],
        width: '100%',
    };

    labels = myData.serviciosRealizados.labels;
    series = myData.serviciosRealizados.series;
    new Chartist.Bar('.net-income', { labels, series }, e, [
        [
            'screen and (max-width: 640px)',
            {
                seriesBarDistance: 5,
                axisX: {
                    labelInterpolationFnc: function (e) {
                        return e[0];
                    },
                },
            },
        ],
    ]);
};
$(function () {
    $.ajax({
        url: '/dashboard/estadisticas',
        method: 'GET',
        success: function (data) {
            crearGrafica1(data);
        },
    });

    jQuery('#visitbylocate').vectorMap({
        map: 'co_merc',
        backgroundColor: 'transparent',
        borderColor: '#000',
        borderOpacity: 0,
        borderWidth: 0,
        zoomOnScroll: !1,
        color: '#d5dce5',
        regionStyle: { initial: { fill: '#d5dce5', 'stroke-width': 1, stroke: 'rgba(255, 255, 255, 0.5)' } },
        enableZoom: !0,
        hoverColor: '#bdc9d7',
        hoverOpacity: null,
        normalizeFunction: 'linear',
        scaleColors: ['#d5dce5', '#d5dce5'],
        selectedColor: '#bdc9d7',
        selectedRegions: [],
        showTooltip: !0,
        onRegionClick: function (e, t, o) {
            var a = 'You clicked "' + o + '" which has the code: ' + t.toUpperCase();
            alert(a);
        },
    });
});

function generarLetra() {
    var letras = ['a', 'b', 'c', 'd', 'e', 'f', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
    var numero = (Math.random() * 15).toFixed(0);
    return letras[numero];
}

function colorHEX() {
    var coolor = '';
    for (var i = 0; i < 6; i++) {
        coolor = coolor + generarLetra();
    }
    return '#' + coolor;
}
